#!/bin/bash python3 

import os

# Assign wildcard sample names
configfile: "task_samples.yaml"

# Assign wildcard constraints
wildcard_constraints:
    sample='[a-zA-Z0-9]+'

rule all:
    input:         
        expand("07_size_metrics/{sample}_1_val_1_bismark_bt2_pe.deduplicated.sorted.bam.insert.txt", sample=config["samples"])

'''
rule make_directories:
    message: "Making directories for data organization"
    output: 
        directory("00_time_logs/"),
        directory("00_std_err_logs/"),
        directory("02_trimmed/"),
        directory("03_screened/"),
        directory("04_aligned/"),
        directory("05_deduplicated/"),
        directory("06_sorted/"),
        directory("07_size_metrics/")
    shell: """
    mkdir 00_time_logs
    mkdir 00_std_err_logs
    mkdir 02_trimmed
    mkdir 03_screened
    mkdir 04_aligned
    mkdir 05_deduplicated
    mkdir 06_sorted
    mkdir 07_size_metrics/
    """

rule trim:
    message: "Trimming samples"
    input:
        r1 = "01_raw_sequences/{sample}_1.fq.gz",
        r2 = "01_raw_sequences/{sample}_2.fq.gz",
        make_dirs = directory("00_time_logs/")
    output:
        out1 = "02_trimmed/{sample}_1.fq.gz_trimming_report.txt",
        out2 = "02_trimmed/{sample}_1_val_1_fastqc.html",
        out3 = "02_trimmed/{sample}_1_val_1_fastqc.zip",
        out4 = "02_trimmed/{sample}_1_val_1.fq.gz",
        out5 = "02_trimmed/{sample}_2.fq.gz_trimming_report.txt",
        out6 = "02_trimmed/{sample}_2_val_2_fastqc.html",
        out7 = "02_trimmed/{sample}_2_val_2_fastqc.zip",
        out8 = "02_trimmed/{sample}_2_val_2.fq.gz"
    log: "00_std_err_logs/02_trimmed_{sample}.log"
    benchmark: "00_time_logs/02_trimmed_{sample}.txt"
    threads: 1
    resources: # https://snakemake.readthedocs.io/en/stable/executing/cluster.html
        mem_mb: 10000, # 10 gb memory
    shell: "trim_galore --paired --cores {threads} --2colour 20 --fastqc --clip_r1 10 --clip_r2 20 --three_prime_clip_r1 10 --three_prime_clip_r2 10 --output_dir 02_trimmed/ {input.r1} {input.r2} 2> {log}"

rule screen:
    message: "Screening samples for sample origin"
    input:
        conf = "00_software/fastq_screen.conf",
        r1 = "02_trimmed/{sample}_1_val_1.fq.gz",
        r2 = "02_trimmed/{sample}_2_val_2.fq.gz"
    output: 
        out1 = "03_screened/{sample}_1_val_1_screen.bisulfite_orientation.png",
        out2 = "03_screened/{sample}_1_val_1_screen.html",
        out3 = "03_screened/{sample}_1_val_1_screen.png",
        out4 = "03_screened/{sample}_1_val_1_screen.txt"
    log: "00_std_err_logs/03_screened_{sample}.log"
    benchmark: "00_time_logs/03_screened_{sample}.txt"
    shell: """
    fastq_screen --conf {input.conf} --bisulfite {input.r1} {input.r1} > 03_screened/ 2> {log}
    """ 
  
rule align:
    message: "Aligning bisfulite reads"
    input:
        r1 = "02_trimmed/{sample}_1_val_1.fq.gz",
        r2 = "02_trimmed/{sample}_2_val_2.fq.gz"
    output: 
        out1 = "04_aligned/{sample}_1_val_1_bismark_bt2_pe.bam",
        out2 = "04_aligned/{sample}_1_val_1_bismark_bt2_PE_report.txt"
    log: "00_std_err_logs/04_aligned_{sample}.txt"
    benchmark: "00_time_logs/04_aligned_{sample}.txt"
    shell: """
    bismark -n 1 --genome /share/lasallelab/genomes/{config[genome]}/ --multicore 6 -1 {input.r1} -2 {input.r2} 2> {log}
    mv {wildcards.sample}_1_val_1_bismark_bt2_pe.bam 04_aligned/
    mv {wildcards.sample}_1_val_1_bismark_bt2_PE_report.txt 04_aligned/
    """

rule deduplicate:
    message: "Removing PCR duplicates"
    input: "04_aligned/{sample}_1_val_1_bismark_bt2_pe.bam"
    output:
        "05_deduplicated/{sample}_1_val_1_bismark_bt2_pe.deduplicated.bam",
        "05_deduplicated/{sample}_1_val_1_bismark_bt2_pe.deduplication_report.txt"
    log: "00_std_err_logs/05_deduplicated_{sample}.txt"
    benchmark: "00_time_logs/05_deduplicated_{sample}.txt"
    shell: """
    deduplicate_bismark --bam --paired {input} 2> {log}
    mv {wildcards.sample}_1_val_1_bismark_bt2_pe.deduplicated.bam 05_deduplicated/
    mv {wildcards.sample}_1_val_1_bismark_bt2_pe.deduplication_report.txt 05_deduplicated/
    """
 
rule sort:
    message: "Sorting BAM files"
    input: "05_deduplicated/{sample}_1_val_1_bismark_bt2_pe.deduplicated.bam"
    output: "06_sorted/{sample}_1_val_1_bismark_bt2_pe.deduplicated.sorted.bam"
    log: "00_std_err_logs/06_sorted_{sample}.txt"
    benchmark: "00_time_logs/06_sorted_{sample}.txt"
    shell: "picard SortSam INPUT={input} OUTPUT={output} SORT_ORDER=coordinate 2> {log}"

'''

rule size_metrics:
    message: "Collecting insert size metrics"
    input: "06_sorted/{sample}_1_val_1_bismark_bt2_pe.deduplicated.sorted.bam"
    output: 
        ins = "07_size_metrics/{sample}_1_val_1_bismark_bt2_pe.deduplicated.sorted.bam.insert.txt",
        hist = "07_size_metrics/{sample}_1_val_1_bismark_bt2_pe.deduplicated.sorted.bam.histogram.pdf"
    log: "00_std_err_logs/07_size_metrics_{sample}.txt"
    benchmark: "00_time_logs/07_size_metrics_{sample}.txt"
    shell: "picard CollectInsertSizeMetrics INPUT={input} OUTPUT={output.ins} HISTOGRAM_FILE={output.hist} ASSUME_SORTED=TRUE 2> {log}"

'''
rule nucleotide_coverage:
    message: "Assessing nucleotide coverage"
    input: "05_deduplicated/{sample}_1_val_1_bismark_bt2_pe.deduplicated.bam"
    output:
    log:
    benchmark:
    shell: "bam2nuc --genome_folder /share/lasallelab/genomes/{config[genome]}/ {input} 2> {log}"
    
rule extract_methylation:
    message:
    input: "{sample}_1_val_1_bismark_bt2_pe.deduplicated.bam"
    output:
    log:
    benchmark:
    shell: "bismark_methylation_extractor -paired-end -gzip -comprehensive -merge_non_CpG -bedGraph -multicore 6 -buffer_size 34G {input} 2> {log}"


rule cytosine_reports:
    message: "Generating genome-wide cytosine reports"
    input:
    output: "{sample}_1_val_1_bismark_bt2_pe.deduplicated.bismark.cov.gz"
    log:
    benchmark:
    shell: "coverage2cytosine --output {output} --genome_folder /share/lasallelab/genomes/{config[genome]}/ --gzip --merge_CpG {output} 2> {log}"

rule qc_report:
    message:
    input:
    output:
    log:
    benchmark:
    shell: "bismark2report 2> {log}"
'''